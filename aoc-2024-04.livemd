<!-- livebook:{"persist_outputs":true} -->

# AoC 2024/04

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Section

```elixir
input = Kino.Input.textarea("input")
```

```elixir
defmodule Day4 do
  defp parse_input(input) do
    input 
    |> String.split("\n")
    |> Enum.map(fn line -> String.graphemes(line) end)
  end

  def solve1(input) do
    input
    |> parse_input()
    |> xmas_count()
  end
  
  defp xmas_count(grid) do
    horizontal_count = 
      grid
      |> Enum.map(&Enum.join/1)
      |> Enum.map(&row_count/1)
      |> Enum.sum()
      

    vertical_count =
      grid
      |> transpose()
      |> Enum.map(&Enum.join/1)
      |> Enum.map(&row_count/1)
      |> Enum.sum()

    row_count = Enum.count(grid)

    diagonal_left_right_count = 
      Enum.map(0..(row_count-3), fn col ->
        Enum.map(0..(row_count-1-col), fn row ->
          Enum.at(grid, row) |> Enum.at(col+row)
        end)
        |> Enum.join()
      end)
      |> Enum.map(&row_count/1)
      |> Enum.sum()
    
    diagonal_right_left_count =
      Enum.map((row_count-1)..2, fn col ->
        Enum.map(0..(row_count-(row_count-col)), fn row ->
          Enum.at(grid, row) |> Enum.at(col - row)
        end)
        |> Enum.join()
      end)
      |> Enum.map(&row_count/1)
      |> Enum.sum()

    {horizontal_count, vertical_count, diagonal_left_right_count, diagonal_right_left_count}
  end

  defp row_count(row) do
    left_right_count = xmass_count(row)
    right_left_count = xmass_count(row |> String.reverse()) 

    left_right_count + right_left_count
  end

  defp xmass_count(string) do
    string
    |> String.graphemes()
    |> Enum.chunk_every(4, 1, :discard)
    |> Enum.filter(fn chunk -> Enum.join(chunk) == "XMAS" end)
    |> Enum.count()
  end
  
  defp transpose(grid) do
    Enum.zip_with(grid, &Function.identity/1)
  end
  
  def solve2(input) do
    input
    |> parse_input()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day4, <<70, 79, 82, 49, 0, 0, 17, ...>>, {:solve2, 1}}
```

## solve1

```elixir
Kino.Input.read(input)
|> Day4.solve1()
```

<!-- livebook:{"output":true} -->

```
{5, 3, 3, 1}
```

```elixir
["MSAMMMMXA", "SMASAMSA", "ASMASAM", "MMXMAX", "XXSAM", "XMXS", "SAM"]
```

```elixir
defmodule Test do
  def find_xmas(string) do
    string
    |> String.graphemes()
    |> Enum.chunk_every(4, 1, :discard)
    |> Enum.filter(fn chunk -> Enum.join(chunk) == "XMAS" end)
    |> Enum.count()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Test, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:find_xmas, 1}}
```

```elixir
string = "SAXAMASAAAXMASA"
matches = Regex.scan(~r/\bXMAS\b/, string)
matches = Regex.scan(~r/XMAS(?![XMAS])/, string)

Test.find_xmas(string)
```

<!-- livebook:{"output":true} -->

```
1
```

```elixir
string = "Happy XMAS to all, and to all a good XMAS!"
matches = Regex.scan(~r/(?<![XMAS])\bXMAS\b(?![XMAS])/, string)
matches = Regex.scan(~r/XMAS(?![XMAS])/, string)

Test.find_xmas(string)
```

<!-- livebook:{"output":true} -->

```
2
```

```elixir
string = "XMASXMASXMAS"
matches = Regex.scan(~r/(?<![XMAS])\bXMAS\b(?![XMAS])/, string)
matches = Regex.scan(~r/XMAS(?![XMAS])/, string)

Test.find_xmas(string)

```

<!-- livebook:{"output":true} -->

```
0
```

## solve2

```elixir
Kino.Input.read(input)
|> Day4.solve2()
```

<!-- livebook:{"output":true} -->

```
[[]]
```

```elixir
Regex.scan(~r/X.*MAS|SAMX/, "HALXAMASo")
```

<!-- livebook:{"output":true} -->

```
[["XAMAS"]]
```

```elixir
grid = [
  ["M", "M", "M", "S", "X", "X", "M", "A", "S", "M"],
  ["M", "S", "A", "M", "X", "M", "S", "M", "S", "A"],
  ["A", "M", "X", "S", "X", "M", "A", "A", "M", "M"],
  ["M", "S", "A", "M", "A", "S", "M", "S", "M", "X"],
  ["X", "M", "A", "S", "A", "M", "X", "A", "M", "M"],
  ["X", "X", "A", "M", "M", "X", "X", "A", "M", "A"],
  ["S", "M", "S", "M", "S", "A", "S", "X", "S", "S"],
  ["S", "A", "X", "A", "M", "A", "S", "A", "A", "A"],
  ["M", "A", "M", "M", "M", "X", "M", "M", "M", "M"],
  ["M", "X", "M", "X", "A", "X", "M", "A", "S", "X"]
]
```

<!-- livebook:{"output":true} -->

```
[
  ["M", "M", "M", "S", "X", "X", "M", "A", "S", "M"],
  ["M", "S", "A", "M", "X", "M", "S", "M", "S", "A"],
  ["A", "M", "X", "S", "X", "M", "A", "A", "M", "M"],
  ["M", "S", "A", "M", "A", "S", "M", "S", "M", "X"],
  ["X", "M", "A", "S", "A", "M", "X", "A", "M", "M"],
  ["X", "X", "A", "M", "M", "X", "X", "A", "M", "A"],
  ["S", "M", "S", "M", "S", "A", "S", "X", "S", "S"],
  ["S", "A", "X", "A", "M", "A", "S", "A", "A", "A"],
  ["M", "A", "M", "M", "M", "X", "M", "M", "M", "M"],
  ["M", "X", "M", "X", "A", "X", "M", "A", "S", "X"]
]
```

```elixir
xs = Day4.find_x_chars(grid)
```

<!-- livebook:{"output":true} -->

```
[
  {0, 4},
  {0, 5},
  {1, 4},
  {2, 2},
  {2, 4},
  {3, 9},
  {4, 0},
  {4, 6},
  {5, 0},
  {5, 1},
  {5, 5},
  {5, 6},
  {6, 7},
  {7, 2},
  {8, 5},
  {9, 1},
  {9, 3},
  {9, 5},
  {9, 9}
]
```

```elixir
row = Enum.at(grid, )
```

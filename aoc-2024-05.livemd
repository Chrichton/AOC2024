<!-- livebook:{"persist_outputs":true} -->

# AoC 2024/05

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Section

```elixir
input = Kino.Input.textarea("input")
```

```elixir
defmodule Day5 do
  def parse_input(input) do
    [rules_str, updates_str] = String.split(input, "\n\n")
    
    rules = 
      rules_str
      |> String.split("\n")
      |> Enum.map(fn rule_str ->
        [from_str, to_str] = String.split(rule_str, "|")
        {String.to_integer(from_str), String.to_integer(to_str)}
      end)
      |> Enum.group_by(fn {from, _to} -> from end, fn {_from, to} -> to end)
     
    updates = 
      updates_str
      |> String.split("\n")
      |> Enum.map(fn pages_str -> 
        String.split(pages_str, ",")
        |> Enum.map(&String.to_integer/1)
      end)

    {rules, updates}
  end

  def solve1(input) do
    parse_input(input)
    |> check_rules_updates()
    |> Enum.filter(fn {result, _} -> result end)
    |> Enum.map(fn {_, update} -> middle_page_number(update) end)
    |> Enum.sum()
  end

  def check_rules_updates({rules, updates}) do
    Enum.map(updates, fn update ->
      Enum.reduce_while(update, {MapSet.new(), update}, fn page, {processed_pages, update} ->
        case Map.fetch(rules, page) do
          {:ok, to_be_printed_after_pages} ->  
            if MapSet.intersection(processed_pages, MapSet.new(to_be_printed_after_pages)) == MapSet.new() do
              {:cont, {MapSet.put(processed_pages, page), update}}
            else
              {:halt, {false, update}}
            end
            _ -> {:cont, {MapSet.put(processed_pages, page), update}}
        end
      end)
    end)
  end
  
  def middle_page_number(update) do
    middle_index = div(Enum.count(update), 2)   
    Enum.at(update, middle_index)
  end
  
  def solve2(input) do
    input
    |> parse_input()
    |> then(fn {rules, updates} ->
      check_rules_updates({rules, updates})
      |> Stream.reject(fn {result, _} -> result end)
      |> Stream.map(fn {_result, update} -> update end)
      |> then(fn updates -> 
        find_correctly_ordered_updates({rules, updates})
        |> Stream.map(fn updates ->
          Stream.filter(updates, fn {result, _} -> result end)
          |> Stream.map(fn {_, update} -> update end)
          |> Stream.map(fn update -> middle_page_number(update) end)
          |> Enum.sum()
        end)
        |> Enum.sum()
      end)
    end)  
  end

  def find_correctly_ordered_updates({rules, updates}) do
    Enum.map(updates, fn update ->   
      check_rules_updates({rules, permutations(update)})
    end)
  end

  def permutations([]), do: [[]]
  def permutations(list) do 
    for elem <- list, rest <- permutations(list--[elem]), do: 
      ([elem|rest])
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day5, <<70, 79, 82, 49, 0, 0, 27, ...>>, {:permutations, 1}}
```

## solve1

```elixir
Kino.Input.read(input)
|> Day5.solve1()
```

<!-- livebook:{"output":true} -->

```
7365
```

```elixir
input
|> Kino.Input.read()
|> Day5.parse_input()
```

<!-- livebook:{"output":true} -->

```
{%{
   39 => [38, 86, 57, 74, 35, 64, 89, 68, 36, 46, 11, 41, 17, 75, 93, 82, 28, 71, 69, 12, 92, 51,
    61, 62],
   74 => [11, 57, 26, 79, 28, 71, 55, 17, 51, 89, 88, 96, 72, 36, 62, 68, 48, 31, 76, 45, 78, 87,
    35, 65],
   69 => [36, 89, 65, 51, 96, 26, 57, 48, 74, 87, 71, 17, 78, 31, 45, 11, 76, 55, 62, 68, 28, 72,
    35, 79],
   45 => [96, 55, 61, 85, 99, 81, 72, 39, 78, 75, 87, 66, 23, 16, 58, 97, 94, 26, 31, 46, 88, 64,
    95, 42],
   51 => [11, 36, 58, 55, 76, 26, 79, 28, 78, 68, 96, 48, 31, 65, 87, 35, 62, 88, 45, 72, 71, 17,
    89, 57],
   26 => [97, 94, 66, 86, 61, 96, 55, 23, 39, 16, 46, 41, 42, 58, 72, 64, 12, 95, 75, 99, 78, 81,
    85, 88],
   85 => [89, 75, 51, 68, 28, 95, 41, 57, 12, 11, 64, 74, 71, 36, 38, 82, 61, 46, 69, 86, 92, 39,
    17, 93],
   86 => [68, 62, 57, 35, 31, 17, 51, 28, 45, 36, 76, 65, 74, 89, 71, 82, 69, 93, 48, 87, 11, 92,
    79, 38],
   62 => [72, 81, 79, 76, 99, 65, 94, 31, 58, 88, 96, 45, 78, 48, 95, 87, 23, 85, 55, 42, 16, 26,
    97, 66],
   16 => [61, 12, 99, 46, 82, 38, 51, 75, 85, 23, 41, 81, 42, 86, 92, 74, 93, 64, 71, 95, 94, 97,
    39, 69],
   17 => [96, 94, 48, 26, 88, 87, 68, 35, 65, 72, 31, 16, 97, 23, 58, 79, 55, 66, 78, 42, 45, 62,
    99, 76],
   48 => [39, 96, 94, 45, 87, 75, 95, 81, 64, 66, 78, 58, 97, 16, 85, 72, 55, 23, 31, 76, 88, 99,
    26, 42],
   88 => [46, 42, 97, 92, 93, 38, 66, 12, 16, 95, 75, 69, 82, 41, 94, 81, 39, 86, 85, 61, 64, 23,
    99, 58],
   89 => [31, 36, 45, 66, 62, 76, 55, 65, 26, 79, 96, 16, 87, 58, 11, 78, 57, 68, 88, 35, 17, 28,
    48, 72],
   81 => [86, 89, 75, 93, 51, 71, 17, 57, 12, 41, 82, 64, 39, 36, 92, 69, 61, 11, 28, 74, 95, 46,
    85, 38],
   11 => [65, 62, 35, 76, 88, 58, 26, 17, 66, 94, 68, 16, 42, 45, 79, 97, 87, 78, 72, 23, 48, 31,
    55, 96],
   57 => [68, 58, 97, 28, 42, 96, 76, 11, 65, 72, 17, 45, 62, 79, 35, 31, 16, 87, 66, 88, 26, 55,
    78, 48],
   95 => [57, 86, 82, 39, 69, 35, 17, 61, 68, 46, 41, 38, 74, 36, 51, 11, 28, 93, 92, 12, 64, 71,
    89, 75],
   87 => [41, 42, 61, 66, 16, 99, 46, 58, 75, 96, 39, 78, 94, 97, 55, 85, 23, 95, 88, 72, 81, 26,
    64, 12],
   28 => [72, 35, 79, 78, 66, 26, 68, 31, 58, 87, 55, 11, 42, 65, 23, 62, 16, 45, 97, 96, 76, 17,
    48, 88],
   58 => [39, 82, 16, 46, 38, 69, 12, 95, 86, 97, 42, 41, 66, 23, 74, 93, 99, 75, 92, 61, 81, 85,
    94, 64],
   97 => [81, 61, 23, 85, 69, 93, 64, 95, 89, 46, 12, 82, 36, 51, 92, 74, 75, 38, 41, 94, 71, 39,
    86, 99],
   76 => [66, 58, 88, 26, 39, 81, 45, 99, 87, 61, 96, 78, 94, 72, 42, 55, 97, 85, 95, 23, 64, 16,
    75, 31],
   36 => [65, 48, 42, 55, 35, 76, 17, 62, 87, 57, 16, 11, 96, 88, 45, 31, 78, 58, 26, 66, 68, 28,
    79, 72],
   35 => [94, 85, 97, 76, 26, 23, 48, 87, 58, 65, 78, 42, 99, 79, 55, 16, 96, 88, 66, 45, 72, 31,
    62, 81],
   78 => [61, 75, 58, 85, 97, 88, 82, 81, 99, 42, 16, 23, 95, 38, 41, 39, 86, 55, 46, 64, 66, 72,
    12, ...],
   64 => [57, 61, 41, 36, 51, 46, 12, 86, 68, 38, 93, 11, 35, 74, 69, 28, 17, 65, 89, 71, 82, 79,
    ...],
   75 => [61, 71, 57, 74, 17, 38, 11, 69, 35, 93, 86, 65, 92, 28, 12, 41, 82, 68, 62, 46, 36, ...],
   66 => [92, 12, 16, 75, 85, 42, 93, 94, 69, 82, 74, 97, 86, 46, 38, 61, 23, 64, 95, 99, ...],
   71 => [72, 68, 79, 45, 26, 57, 87, 48, 88, 78, 17, 89, 76, 96, 55, 11, 62, 58, 66, ...],
   79 => [85, 26, 48, 87, 31, 66, 55, 39, 94, 88, 99, 95, 75, 76, 97, 96, 81, 45, ...],
   82 => [62, 69, 92, 57, 35, 87, 89, 17, 26, 74, 36, 48, 31, 11, 79, 96, 93, ...],
   23 => ~c"@'c9.R=Q_UJY)\fG\\&VE3^]$K",
   31 => [23, 26, 75, 64, 87, 88, 16, 96, 42, 85, 46, 72, 12, 61, 95, ...],
   65 => [99, 55, 88, 48, 81, 85, 72, 31, 26, 39, 42, 58, 78, 87, ...],
   99 => [69, 74, 92, 82, 39, 46, 28, 11, 86, 57, 85, 12, 71, ...],
   61 => [17, 79, 89, 86, 68, 41, 46, 71, 51, 12, 11, 28, ...],
   38 => [62, 79, 65, 28, 68, 48, 35, 74, 71, 31, 36, ...],
   55 => [46, 86, 12, 75, 95, 41, 61, 42, 23, 94, ...],
   42 => [97, 92, 95, 38, 94, 82, 89, 85, 86, ...],
   41 => [82, 76, 71, 48, 57, 74, 65, 89, ...],
   12 => [38, 92, 93, 57, 82, 45, 76, ...],
   92 => [55, 87, 31, 76, 74, 17, ...],
   46 => [65, 69, 48, 38, 28, ...],
   93 => [74, 78, 87, 11, ...],
   68 => [31, 79, 97, ...],
   72 => [58, 38, ...],
   94 => [86, ...],
   96 => [...]
 },
 [
   [74, 57, 28, 17, 96],
   [26, 58, 55, 62, 76, 23, 66, 97, 45, 88, 94, 68, 16, 99, 79, 87, 65, 42, 72, 78, 48, 35, 96],
   [62, 65, 48, 76, 45, 87, 26, 96, 78, 55, 72, 88, 58, 66, 16, 42, 97, 94, 99, 81, 85],
   [17, 62, 38, 11, 69, 74, 46, 51, 68, 92, 89, 82, 12, 71, 36, 79, 65, 93, 35, 57, 41, 28, 86],
   [62, 87, 88, 66, 16, 97, 85],
   [11, 89, 17, 87, 62, 55, 69, 65, 76],
   [55, 58, 66, 23, 94, 81, 39, 75, 64, 61, 46, 86, 82],
   ~c":B*a^Q_K@=.\f)V&R]\\E",
   [28, 11, 17, 68, 35, 62, 45, 31, 26, 96, 78, 55, 72, 66, 16, 42, 97],
   [41, 86, 38, 82, 93, 69, 74, 89, 36, 57, 28, 17, 62, 65, 45],
   [36, 99, 61, 82, 64, 74, 38, 94, 89, 39, 95, 41, 92, 93, 85, 69, 12, 75, 23],
   [41, 51, 64, 12, 92, 69, 36, 46, 11, 61, 86, 74, 38, 85, 28, 89, 95, 82, 39, 75, 57, 17, 93],
   ~c":*^cU'E",
   [28, 65, 36, 51, 79, 57, 87, 62, 71, 38, 69, 31, 45],
   [17, 11, 97, 79, 35, 16, 26, 48, 42, 65, 72, 31, 23],
   ~c"'K@)V&\\EY$#",
   [23, 94, 99, 85, 95, 39, 75, 46, 86, 38, 82, 92, 69, 74, 36],
   [61, 46, 12, 41, 86, 38, 93, 92, 69, 74, 51, 89, 36, 57, 28, 11, 17, 35, 62, 65, 79],
   [64, 82, 61, 41, 75, 86, 12, 81, 92, 51, 39, 42, 16, 95, 74],
   [72, 31, 66, 26, 78, 85, 16, 97, 23, 39, 95, 45, 79],
   [16, 42, 94, 81, 95, 46, 86, 93, 92, 69, 51],
   ~c"G$D>O0H",
   [85, 95, 64, 61, 93, 92, 51, 36, 17],
   [38, 68, 69, 57, 17, 76, 71, 74, 36, 62, 92, 35, 28, 45, 48, 65, 89, 82, 11, 79, 93, 51, 41],
   [38, 93, 92, 69, 74, 51, 71, 89, 57, 28, 11, 68, 35, 62, 65, 79, 48, 76, 45, 31, 87],
   [17, 38, 64, 41, 51, 46, 35, 62, 11, 82, 65, 92, 36],
   ~c"#0-HXB*aQ",
   ~c"=`QU@",
   [48, 58, 88, 96, 42, 95, 31, 99, 72, 66, 85, 39, 55, 76, 23, 87, 16, 97, 81, ...],
   ~c"N@:QX'7`aBU.KV*",
   [99, 85, 88, 31, 79, 62, 81],
   [12, 82, 92, 69, 74, 89, 36, 57, 28, 11, 68, 65, 76],
   [26, 89, 55, 11, 31, 76, 72, 45, 88, 57, 79, 58, 66],
   [99, 81, 85, 38, 89, 57, 28],
   [74, 51, 71, 36, 57, 28, 11, 17, 68, 35, 62, 65, 79, ...],
   [11, 51, 26, 74, 87, 62, 65, 17, 76, 31, 72],
   ~c".G\v#>",
   [88, 61, 23, 85, 38, 94, 64, 66, 97],
   [64, 12, 38, 58, 81, 86, 46, 95, 55, ...],
   [95, 97, 78, 88, 55, 96, 81, 42, ...],
   ~c"c_K@=V&EGY9",
   [45, 26, 96, 78, 55, 72, ...],
   ~c"-N7B^",
   [39, 75, 64, 61, ...],
   [94, 38, 12, ...],
   ~c"'&RY$",
   [39, ...],
   [...],
   ...
 ]}
```

## solve2

```elixir
Kino.Input.read(input)
|> Day5.solve2()
```

```elixir
IO.inspect ~c"aK/=5", charlists: :as_lists
```

<!-- livebook:{"output":true} -->

```
[97, 75, 47, 61, 53]
```

<!-- livebook:{"output":true} -->

```
~c"aK/=5"
```

```elixir
rules = [   
   {47, 13},
   {75, 47},
   {97, 75},
   {47, 61},
   {75, 61},
   {47, 29},
   {75, 13},
   {53, 13}
 ]
|> Enum.group_by(fn {from, _to} -> from end, fn {_from, to} -> to end)
```

<!-- livebook:{"output":true} -->

```
%{47 => [13, 61, 29], 53 => ~c"\r", 75 => ~c"/=\r", 97 => ~c"K"}
```

```elixir
rules = %{75 => [29, 53, 47, 61, 13]}
```

<!-- livebook:{"output":true} -->

```
%{75 => [29, 53, 47, 61, 13]}
```

```elixir
updates = [[97, 13, 75, 29, 47]]
```

<!-- livebook:{"output":true} -->

```
[[97, 13, 75, 29, 47]]
```

```elixir
Day5.check_rules_updates({rules, updates})
```

<!-- livebook:{"output":true} -->

```
[false: [97, 13, 75, 29, 47]]
```

```elixir
rules = %{
   29 => ~c"\r",
   47 => [53, 13, 61, 29],
   53 => [29, 13],
   61 => [13, 53, 29],
   75 => [29, 53, 47, 61, 13],
   97 => [13, 61, 47, 29, 53, 75]
 }
```

<!-- livebook:{"output":true} -->

```
%{
  29 => ~c"\r",
  47 => [53, 13, 61, 29],
  53 => [29, 13],
  61 => [13, 53, 29],
  75 => [29, 53, 47, 61, 13],
  97 => [13, 61, 47, 29, 53, 75]
}
```

```elixir
Day5.check_rules_updates({rules, [[97,13,75,29,47]]})
```

<!-- livebook:{"output":true} -->

```
[false: [97, 13, 75, 29, 47]]
```

```elixir
defmodule Test do
  def permutations([]), do: [[]]
  def permutations(list) do 
    for elem <- list, rest <- permutations(list--[elem]), do: 
      ([elem|rest])
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Test, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:permutations, 1}}
```

```elixir
Test.permutations([13, 53, 29])
```

<!-- livebook:{"output":true} -->

```
[[13, 53, 29], [13, 29, 53], [53, 13, 29], [53, 29, 13], [29, 13, 53], [29, 53, 13]]
```
